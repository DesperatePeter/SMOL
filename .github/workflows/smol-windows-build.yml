# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build SMOL for Windows and Create Release from Tag

on:
  push:
    tags:
      - "smol-*"

jobs:
  build_and_publish:
    runs-on: windows-latest

    steps:
      # Env Setup
      - name: "Check version in tag"
        uses: nowsprinting/check-version-format-action@v3
        id: version
        with:
          prefix: "smol-"

      - name: "Print version info if valid"
        run: |
          echo "Full version: ${{ steps.version.outputs.full }}"
          echo "Is stable: ${{ steps.version.outputs.is_stable }}"
        if: steps.version.outputs.is_valid == 'true'

      - name: "Print version warning if invalid"
        run: |
          echo "Found invalid version format in tag!"
        if: steps.version.outputs.is_valid == 'false'

      # Env vars: artifacts_folder, code_folder, smol_branch
      - name: "Env var: staging folder for artifacts"
        shell: bash
        run: |
          echo "artifacts_folder=github-artifacts" >> $GITHUB_ENV

      # NOTE TO SELF: when adding "stable", remember that "unstable" contains the word "stable"
      - name: "Env var: unstable"
        if: steps.version.outputs.is_valid == 'true' && contains(steps.version.outputs.full, 'unstable')
        shell: bash
        run: |
          echo "smol_branch=unstable" >> $GITHUB_ENV

      - name: "Env var: test"
        if: steps.version.outputs.is_valid == 'true' && contains(steps.version.outputs.full, 'test')
        shell: bash
        run: |
          echo "smol_branch=test" >> $GITHUB_ENV

      - name: "Install dependency: JDK 16"
        if: steps.version.outputs.is_valid == 'true'
        uses: actions/setup-java@v2
        with:
          java-version: "16"
          distribution: "adopt"

      # Code checkout
      - name: "git checkout of SMOL source"
        uses: actions/checkout@v3

      - name: "git checkout of SMOL dist"
        uses: actions/checkout@v3
        with:
          repository: "davidwhitman/SMOL_Dist"
          ref: ${{ env.smol_branch }}
          path: ${{ env.artifacts_folder }}
          token: ${{ secrets.WRITE_PAT }}
          lfs: true
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
          fetch-depth: 1 # set to 0, otherwise, there would be errors pushing refs to the destination repository.

      # Build
      - name: "Validate Gradle wrapper"
        if: steps.version.outputs.is_valid == 'true'
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: "Build Unstable"
        if: steps.version.outputs.is_valid == 'true' && env.smol_branch == 'unstable'
        uses: gradle/gradle-build-action@937999e9cc2425eddc7fd62d1053baf041147db7
        with:
          arguments: buildSmolDistUnstable

      - name: "Build Test"
        if: steps.version.outputs.is_valid == 'true' && env.smol_branch == 'test'
        uses: gradle/gradle-build-action@937999e9cc2425eddc7fd62d1053baf041147db7
        with:
          arguments: buildSmolDistTest

      # Publish
      - name: "Copy artifacts to staging folder"
        shell: bash
        run: | # copy handles hidden files/folders better than mv apparently?
          echo $(pwd)
          ls . -a
          mkdir -p "./${{ env.artifacts_folder }}/SMOL_Dist"
          cp -rv "./dist/main/app/SMOL/*" "./${{ env.artifacts_folder }}/SMOL_Dist"

      - name: "Commit files"
        run: |
          cd "${{ env.artifacts_folder }}/SMOL_Dist"
          git config --local user.email "1343347+davidwhitman@users.noreply.github.com"
          git config --local user.name "Beta Core [GitHub Actions]"
          git add .
          git commit -m "{{ steps.version.outputs.full }}"

      - name: "Publish to SMOL_Dist"
        if: steps.version.outputs.is_valid == 'true'
        uses: ad-m/github-push-action@master
        with:
          repository: "davidwhitman/SMOL_Dist"
          branch: ${{ env.smol_branch }}
          directory: "${{ env.artifacts_folder }}/SMOL_Dist"
          github_token: ${{ secrets.WRITE_PAT }}
